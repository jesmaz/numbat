import 'locallib/math.nbt'

struct CString {alias uint8 chars}


extern def malloc @cstyle (uint64 size) : {alias uint8}
extern def free @cstyle (alias uint8 ptr) : {}


def ' [ ]' (alias CString string, uint64 index) : {alias uint8}
	alias uint8 chars => string.chars
	return asm 'numbat' : 'gep chars, index'

def ' + ' (CString lhs, CString rhs) : {CString}
	uint64 length = length(lhs) + length(rhs) + 1
	CString res
	res.chars => malloc (length)
	uint64 count = 0
	uint64 i = 0
	while lhs [count]:
		uint8 t = lhs [count]
		res [i] = t
		++i
		++count
	count = 0
	while rhs [count]:
		res [i] = rhs [count]
		++i
		++count
	++i
	res [i] = 0
	return res

def length (alias CString string) : {uint64}
	uint64 count = 0
	while string [count]:
		++count
	return count