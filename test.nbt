import 'locallib/string.nbt' as strlib

#struct vec2 $[type T] {T i, T j}

struct testStruct {int64 i, double d}
struct mn {ref int64 t}

#struct ArrayExample {int32 someValue, int8 [,] array}

#def ArrayExample (int32 val, int64 lena, int64 lenb) {ArrayExample self}:
	#self.someValue = 50
	
	#self.array = {{34, 45}, {45, 11}}

#def Scale (ref vec2int8 vec): {int8}
#	int8 i = vec.i
#	int8 j = vec.j
#	return i * i + j * j

extern def strlen @cstyle (ref int8 str) {int32}:
extern def sin @cstyle (double d) {double}:

def ' = ' (ref bool lhs, bool rhs) {bool}:
	asm 'numbat' : 'mov lhs, rhs'
	return lhs

def ' = ' (ref int8 lhs, int8 rhs) {int8}:
	asm 'numbat' : 'mov lhs, rhs'
	return lhs

def ' = ' (ref int64 lhs, int64 rhs) {int64}:
	asm 'numbat' : 'mov lhs, rhs'
	return lhs

def ' = ' (ref double lhs, double rhs) {double}:
	asm 'numbat' : 'mov lhs, rhs'
	return lhs

#def ' = ' $<type T> (ref T lhs, T rhs) : {T}
#	asm 'numbat' : 'mov lhs, rhs'
#	return lhs

def ' * ' (int8 lhs, int8 rhs) {int8}:
	return asm 'numbat' : 'mul lhs, rhs'

def ' < ' @cstyle (int8 lhs, int8 rhs) {bool}:
	return asm 'numbat' : 'cmplt lhs, rhs'

def ' + ' (int8 lhs, int8 rhs) {int8}:
	return asm 'numbat' : 'add lhs, rhs'

def ' + ' (double lhs, double rhs) {double}:
	return asm 'numbat' : 'fadd lhs, rhs'

def redir (ref mn a, ref int64 t) {}:
	a.t => t
	return

def func (int8 num) {int8}:
	return num

def max (int8 a, int8 b) {int8}:
	bool cond = a < b
	while cond:
		return b
	return a

def test () {int8}:
	int8 n = 90
	return n

def swap (int8 lhs, int8 rhs) {int8, int8}:
	return rhs, lhs

def testFunc (int8 lhs, int8 rhs) {int8}:
	#vec2 $<int8> vec
	int8 [10] array
	int64 [39] array2
	array2 [10] = 70
	testStruct ts
	int8 a = 12
	a = ts.i
	a = rhs * (a + 32)
	int8 i = 10
	while i:
		i = i + 1
	int8 b
	int64 c
	c = b
	b = func ((a + b) * lhs + rhs * 2)
	a = max (a, b)
	a, b, c = b, c, a
	strlen ("string")
	strlen ("Another String")
	strlib.modtest (14)
	return a

def tupletest () {}:
	int8 a
	int8 b
	a, b = swap (a, b)
	return

def tfunc (ref int64 t) {}:
	t = 40
	return

def tfunc (ref double t) {}:
	t = sin (40)
	return

def I (ref testStruct ts) {int64}:
	return ts.i

def cCallbackTest @cstyle () {int64}:
	return 1273

extern def write @cstyle (int64 file, ref int8 str, int32 length) {}:
extern def exit @cstyle (int32 e) {}:

def _start () {int32}:
	write (0, "test\n", 5)
	exit (0)
	return 0