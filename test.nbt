import 'locallib/string.nbt'

#struct vec2 $[type T] {T i, T j}

struct testStruct {int64 i, double d}
struct mn {alias int64 t}

#def Scale (alias vec2int8 vec): {int8}
#	int8 i = vec.i
#	int8 j = vec.j
#	return i * i + j * j

extern def sin @cstyle (double d) : {double}

def ' = ' (alias bool lhs, bool rhs) : {bool}
	asm 'numbat' : 'mov lhs, rhs'
	return lhs

def ' = ' (alias int8 lhs, int8 rhs) : {int8}
	asm 'numbat' : 'mov lhs, rhs'
	return lhs

def ' = ' (alias int64 lhs, int64 rhs) : {int64}
	asm 'numbat' : 'mov lhs, rhs'
	return lhs

def ' = ' (alias double lhs, double rhs) : {double}
	asm 'numbat' : 'mov lhs, rhs'
	return lhs

#def ' = ' $<type T> (alias T lhs, T rhs) : {T}
#	asm 'numbat' : 'mov lhs, rhs'
#	return lhs

def ' * ' (int8 lhs, int8 rhs) : {int8}
	return asm 'numbat' : 'mul lhs, rhs'

def ' < ' @cstyle (int8 lhs, int8 rhs) : {bool}
	return asm 'numbat' : 'cmplt lhs, rhs'

def ' + ' (int8 lhs, int8 rhs) : {int8}
	return asm 'numbat' : 'add lhs, rhs'

def ' + ' (double lhs, double rhs) : {double}
	return asm 'numbat' : 'fadd lhs, rhs'

def redir (alias mn a, alias int64 t) : {}
	a.t => t
	return

def func (int8 num): {int8}
	return num

def max (int8 a, int8 b) : {int8}
	bool cond = a < b
	while cond:
		return b
	return a

def test () : {int8}
	int8 n = 90
	return n

def swap (int8 lhs, int8 rhs) : {int8, int8}
	return rhs, lhs

def testFunc (int8 lhs, int8 rhs): {int8}
	#vec2 $<int8> vec
	testStruct ts
	int8 a = 12
	a = ts.I
	a = rhs * (a + 32)
	int8 i = 10
	while i:
		i = i + 1
	int8 b
	int64 c
	c = b
	b = func ((a + b) * lhs + rhs * 2)
	a = max (a, b)
	a, b, c = b, c, a
	return a

def tupletest () : {}
	int8 a
	int8 b
	a, b = swap (a, b)
	return

def tfunc (alias int64 t) : {}
	t = 40
	return

def tfunc (alias double t) : {}
	t = sin (40)
	return

def I (alias testStruct ts) : {int64}
	return ts.i

def cCallbackTest @cstyle () : {int64}
	return 1273