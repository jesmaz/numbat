#import 'locallib/math.nbt' as math
#import 'locallib/string.nbt' as strlib
import string as strlib
import os as os
import io

#struct vec2 $[type T] {T i, T j}

struct testStruct {int64 i, double d}
struct mn {ref int64 t}

#struct ArrayExample {int32 someValue, int8 [,] array}

#def ArrayExample (int32 val, int64 lena, int64 lenb) {ArrayExample self}:
	#self.someValue = 50
	
	#self.array = {{34, 45}, {45, 11}}

#def Scale (ref vec2int8 vec): {int8}
#	int8 i = vec.i
#	int8 j = vec.j
#	return i * i + j * j

extern def strlen @cstyle (ref int8 str) -> (int32)
extern def sin @cstyle (double d) -> (double)

def ' < ' @cstyle (int8 lhs, int8 rhs) -> (bool)
	return asm 'numbat' : 'cmplt lhs, rhs'


def redir (ref mn a, ref int64 t)
	a.t => t
	return

def func (int8 num) -> (int8)
	return num

def max (int8 a, int8 b) -> (int8)
	bool cond = a < b
	while (cond) {
		return b
	}
	return a

def test () -> (int8)
	int8 n = 90
	return n

def swap (int8 lhs, int8 rhs) -> (int8, int8)
	return rhs, lhs

def testFunc (int8 lhs, int8 rhs) -> (int8) {
	#vec2 $<int8> vec
	string strtest
	string [1] strarrtest
	int8 [10] array
	int64 [39] array2
	array2 [10] = 70
	testStruct ts
	int8 a = 12
	a = ts.i
	a = rhs * (a + 32)
	int8 i = 10
	while (i) {
		i = i + 1
		int8 j = 1
		while (j) {
			j = j - 1
		}
	}
	int8 b
	int64 c = 9 - 1
	c = b
	b = func ((a + b) * lhs + rhs * 2)
	a = max (a, b)
	#a, b, c = b, c, a
	#strlen ("string")
	#strlen ("Another String")
	#strlib.modtest (14)
	return a
}

def tupletest () {
	int8 a
	int8 b
	#a, b = swap (a, b)
	return
}

def tfunc (ref int64 t) {
	t = 40
	return
}

def tfunc (ref double t) {
	t = sin (40)
	return
}

def I (ref testStruct ts) -> (int64) {
	return ts.i
}

def cCallbackTest @cstyle () -> (int64) {
	return 1273
}

extern def exit @cstyle (int32 e)

int64 global = 10

def _start @cstyle () -> (int32) {
	uint64 a = 3
	while (0 < a) {
		uint64 b = 3
		while (0 < b) {
			io.print ("(" + a + (", " + b + ")"))
			b = b - 1
		}
		a = a - 1
		io.print ("\n")
	}
	float f = 0.4f
	quad q = 0.4q
	bool t = 10 < global
	int8 [6] arr
	arr [0] = 104
	arr [1] = 101
	arr [2] = 108
	arr [3] = arr [2]
	arr [4] = 111
	arr [5] = 10
	#int8 [6] arr2
	#arr2 = arr
	os.filehandle fh
	fh.handle = 0
	#os.write (fh, "Why \n\"")
	os.write (fh, arr)
	#os.write (0, "Text\n\n", 6)
	string str
	str = "Hello again\n" + "and again\n"
	string k
	k = "totally a string: "
	string l
	#str = "Hello again\n" + "and again\n"
	#io.print ("Hello again\n" + "and again\n")
	io.print (string ("string\n" + "Another string\n"))
	l = k + str
	io.print ("just a raw string\n")
	io.print (k + str)
	io.print (l + 42 + "\n")
	#strlib.string ("str\n")
	#io.print (str)
	exit (0)
	int32 l = 0
	return l
}

_start ()