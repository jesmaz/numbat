import os


struct ifstream {os.filehandle handle, int8 [0] buffer, int64 pos, int64 back}
struct ofstream {os.filehandle handle, int8 [0] buffer, int64 pos, int64 back}
struct fstream {os.filehandle handle, int8 [0] buffer, int64 pos, int64 back}


os.filehandle stdout
stdout.handle = 1
os.filehandle stdin
stdin.handle = 0
os.filehandle stderr
stderr.handle = 2


def print (const ref string str) -> (int64 length) {
	int64 l = os.write (stdout, str.data)
	return l
}

def scan () -> (string token) {
	string s = scan (" \n\r\t")
	return s
}

int8 [1024] buffer
int64 pos = 0
int64 back = 0

def next @local () -> (int8) {
	while (pos == back) {
		back = 0
		pos = 0
		print ("length: " ~ buffer.length ~ "\n")
		back = os.read (stdin, buffer)
		print ("b\n")
	}
	int8 char = buffer [pos]
	pos = pos + 1
	return char
}

def max @local (bool a, bool b) -> (bool) {
	while (a) {
		return a
	}
	return b
}

def in @local (int8 char, const ref int8 [0] data) -> (bool) {
	bool found = 0
	int64 pos = 0
	while (pos < data.length) {
		bool n = data [pos] == char
		found = max (found, n)
		pos = pos + 1
	}
	return found
}

def scan (const ref string term) -> (string token) {
	int8 [1024] buff
	print ("1")
	string s
	int8 char = next ()
	int64 pos = 0
	bool cont = 1
	print ("2")
	while (cont) {
		print ("3")
		buff [pos] = char
		pos = pos + 1
		char = next ()
		cont = 1-in (char, term.data)
	}
	buff.length = pos
	s.data = buff
	return s
}


def add (double x, double y) -> (double) {
	return x + y
}