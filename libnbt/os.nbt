import string

# Descriptor containers
struct filehandle {int32 handle, int32 status}
struct sockethandle {int32 handle, int32 status}


# File handling system functions
extern def close @cstyle (int32 handle)
extern def dup @cstyle (int32 handle) -> (int32 copy)
extern def lseek @cstyle (int32 handle, uint64 offset, int32 whence) -> (uint64 pos)
extern def open @cstyle (cstring filename, int32 flags) -> (int32 handle)
extern def read @cstyle (int32 handle, ref int8 data, int64 length) -> (int64 read)
extern def write @cstyle (int32 handle, ref int8 data, int64 length) -> (int64 written)

# Socket system functions
extern def accept @cstyle (int32 handle, ref int8 sockaddr, ref uint32 length) -> (int32 status)
extern def bind @cstyle (int32 handle, ref int8 sockaddr, uint32 length) -> (int32 status)
extern def connect @cstyle (int32 handle, ref int8 sockaddr, uint32 length) -> (int32 status)
extern def listen @cstyle (int32 handle, int32 backlog) -> (int32 status)
extern def recv @cstyle (int32 handle, ref int8 buffer, uint64 length, uint32 flags) -> (int64 recvd)
extern def recvfrom @cstyle (int32 handle, ref int8 buffer, uint64 length, uint32 flags, ref int8 sockaddr, ref uint32 addrlength) -> (int64 recvd)
extern def send @cstyle (int32 handle, ref int8 buffer, uint64 length, uint32 flags) -> (int64 sent)
extern def sendto @cstyle (int32 handle, ref int8 buffer, uint64 length, uint32 flags, ref int8 sockaddr, ref uint32 addrlength) -> (int64 sent)
extern def socket @cstyle (int32 domain, int32 type, int32 protocol) -> (int32 handle)




# File handling wrapper functions
#def close (ref filehandle handle)
#	close (handle.handle)

def copy (ref filehandle handle) -> (filehandle copy)
	filehandle ret
	ret.status = handle.status
	ret.handle = dup (handle.handle)
	return ret

def lseek (ref filehandle handle, uint64 offset, int32 whence) -> (uint64 result)
	return lseek (handle.handle, offset, whence)

def open (const ref string filename, int32 flags) -> (filehandle handle)
	filehandle hand
	#hand.handle = open (filename.cstring (), flags)
	return hand

def read (ref filehandle handle, ref int8 [0] data) -> (int64 read)
	return read (handle.handle, data [0], data.length)

def write (ref filehandle handle, ref int8 [0] data) -> (int64 written)
	return write (handle.handle, data [0], data.length)


# Socket wrapper functions
