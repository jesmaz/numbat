# Descriptor containers
struct filehandle {int32 handle, int32 status}
struct sockethandle {int32 handle, int32 status}


# File handling system functions
extern def close (int32 handle)
extern def dup (int32 handle) -> (int32 copy)
extern def lseek (int32 handle, int64 offset, int32 whence) -> (int64 pos)
extern def open (ptrint filename, int32 flags, int32 mode) -> (int32 handle)
extern def read (int32 handle, ptrint data, int64 length) -> (int64 bytes)
extern def write @cstyle (int32 handle, ptrint data, int64 length) -> (int64 bytes)

# Socket system functions
extern def accept (int32 handle, ref int8 sockaddr, ref uint32 length) -> (int32 status)
extern def bind (int32 handle, ref int8 sockaddr, uint32 length) -> (int32 status)
extern def connect (int32 handle, ref int8 sockaddr, uint32 length) -> (int32 status)
extern def listen (int32 handle, int32 backlog) -> (int32 status)
extern def recv (int32 handle, ref int8 buffer, uint64 length, uint32 flags) -> (int64 recvd)
extern def recvfrom (int32 handle, ref int8 buffer, uint64 length, uint32 flags, ref int8 sockaddr, ref uint32 addrlength) -> (int64 recvd)
extern def send (int32 handle, ref int8 buffer, uint64 length, uint32 flags) -> (int64 sent)
extern def sendto (int32 handle, ref int8 buffer, uint64 length, uint32 flags, ref int8 sockaddr, ref uint32 addrlength) -> (int64 sent)
extern def socket (int32 domain, int32 type, int32 protocol) -> (int32 handle)




# File handling wrapper functions
def close (ref filehandle handle) -> () {
	close (handle.handle)
}

def copy (ref filehandle handle) -> (filehandle copy) {
	filehandle ret
	ret.status = handle.status
	ret.handle = dup (handle.handle)
	return ret
}

def lseek (ref filehandle handle, int64 offset, int32 whence) -> (int64 result) {
	return lseek (handle.handle, offset, whence)
}

def open (const ref string filename, int32 flags) -> (filehandle handle) {
	filehandle hand
	hand.handle = open (filename.data as ptrint, flags, 511)
	return hand
}

def read (ref filehandle handle, ref int8 [] data) -> (int64 bytes) {
	return read (handle.handle, data as ptrint, data.length)
}

def write (ref filehandle handle, ref int8 [0] data) -> (int64 bytes) {
	return write (handle.handle, data as ptrint, data.length)
}


# Socket wrapper functions
